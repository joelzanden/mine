name: Build and attach binaries to the release

on:
  workflow_dispatch:
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-12, windows-2022, ubuntu-22.04]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Toolchain info
        run: |
          cargo --version --verbose
          rustc --version

      - name: Build
        run: cargo build --verbose --release

      - name: Import certificate
        if: runner.os == 'Windows'
        env:
          WINDOWS_SIGN_CERT_BASE64: ${{ secrets.WINDOWS_SIGN_CERT_BASE64 }}
          WINDOWS_SIGN_PASSWORD: ${{ secrets.WINDOWS_SIGN_PASSWORD }}
        run: |
          echo $env:WINDOWS_SIGN_CERT_BASE64 | Out-File -Encoding utf8 cert.p12.base64
          certutil -decode cert.p12.base64 cert.p12
          $pfx = Get-PfxData -FilePath .\cert.p12 -Password (ConvertTo-SecureString -String $env:WINDOWS_SIGN_PASSWORD -AsPlainText -Force)

      - name: Sign Windows binary
        if: runner.os == 'Windows'
        shell: powershell
        env:
          WINDOWS_SIGN_PASSWORD: ${{ secrets.WINDOWS_SIGN_PASSWORD }}
        run: |
          $signtoolPath = "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x86\signtool"
          $timestampServerUrl = "http://timestamp.digicert.com"
          $securePassword = ConvertTo-SecureString -String $env:WINDOWS_SIGN_PASSWORD -AsPlainText -Force
          $credentials = New-Object System.Management.Automation.PSCredential("dummy", $securePassword)
          & $signtoolPath sign /fd SHA256 /f .\cert.p12 /p $($credentials.GetNetworkCredential().Password) /tr $timestampServerUrl /td sha256 target\release\mine.exe

      - name: Package (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir bin
          cp target/release/mine.exe bin/
          $binary_name = "mine-${{ github.event.release.tag_name }}.windows.x86_64"
          echo "BINARY_NAME=$binary_name.zip" | Out-File -Append -Encoding utf8 $env:GITHUB_ENV
          Compress-Archive -Path bin/mine.exe -DestinationPath "$binary_name.zip"

      - name: Package (macOS/Linux)
        if: runner.os != 'Windows'
        run: |
          mkdir bin
          cp target/release/mine bin/
          if [ "${{ runner.os }}" == "Linux" ]; then
            os_name="linux"
            arch="x86_64"
          else
            os_name=$(echo ${{ matrix.os }} | sed 's/macos-//;s/10.15/catalina/;s/11/big_sur/;s/12/monterey/')
            arch=$(echo "x86_64-apple-darwin" | cut -d- -f1)
          fi
          ext="bottle.tar.gz"
          binary_name=mine-${{ github.event.release.tag_name }}.${os_name}.${arch}.${ext}
          echo "BINARY_NAME=$binary_name" >> $GITHUB_ENV
          tar czf $binary_name -C bin mine

      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BINARY_NAME }}
          path: ${{ env.BINARY_NAME }}

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Calculate checksums, generate table, and attach binaries to the release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          table="| Filename | SHA256 Checksum |\n|----------|-----------------|"
          for file in artifacts/*/*.{tar.gz,zip}; do
            checksum=$(sha256sum "$file" | awk '{print $1}')
            table+="\n| $(basename "$file") | $checksum |"
          done

          current_body=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/${{ github.event.release.id }}" \
            | jq -r '.body')

          new_body="${current_body}\n${table}"
          upload_url=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/${{ github.event.release.id }}" \
            | jq -r '.upload_url')
          upload_url="${upload_url%\{?name,label\}}"

          for file in artifacts/*/*.{tar.gz,zip}; do
            curl -s -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              --data-binary "@$file" \
              "${upload_url}?name=$(basename "$file")&label=$(basename "$file")"
          done

          curl -s -X PATCH -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -H "Accept: application/vnd.github+json" \
            -d "{\"body\": \"$new_body\"}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/${{ github.event.release.id }}"
