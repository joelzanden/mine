name: Build and attach binaries to the release

on:
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-10.15, macos-11, macos-12, windows-latest, ubuntu-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Toolchain info
        run: |
          cargo --version --verbose
          rustc --version

      - name: Build
        run: cargo build --verbose --release

      - name: Package
        run: |
          mkdir bin
          if [ "${{ runner.os }}" == "Windows" ]; then
            cp target/release/mine.exe bin/
            os_name="windows"
            arch="x86_64"
            binary_name=mine-${{ github.event.release.tag_name }}.${os_name}.${arch}
            echo "BINARY_NAME=$binary_name.zip" >> $GITHUB_ENV
            powershell Compress-Archive -Path bin/mine.exe -DestinationPath $binary_name
          else
            cp target/release/mine bin/
            if [ "${{ runner.os }}" == "Linux" ]; then
              os_name="linux"
              arch="x86_64"
            else
              os_name=$(echo ${{ matrix.os }} | sed 's/macos-//;s/10.15/catalina/;s/11/big_sur/;s/12/monterey/')
              arch=$(echo "x86_64-apple-darwin" | cut -d- -f1)
            fi
            ext="bottle.tar.gz"
            binary_name=mine-${{ github.event.release.tag_name }}.${os_name}.${arch}.${ext}
            echo "BINARY_NAME=$binary_name" >> $GITHUB_ENV
            tar czf $binary_name -C bin mine
          fi

      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BINARY_NAME }}
          path: ${{ env.BINARY_NAME }}

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Calculate checksums, generate table, and attach binaries to the release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          table="| Filename | SHA256 Checksum |\n|----------|-----------------|"
          for file in artifacts/*.tar.gz/*.tar.gz; do
            checksum=$(sha256sum "$file" | awk '{print $1}')
            table+="\n| $(basename "$file") | $checksum |"
          done

          current_body=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/${{ github.event.release.id }}" \
            | jq -r '.body')

          new_body="${current_body}\n${table}"
          upload_url=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/${{ github.event.release.id }}" \
            | jq -r '.upload_url')
          upload_url="${upload_url%\{?name,label\}}"

          for file in artifacts/*.tar.gz/*.tar.gz; do
            curl -s -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              --data-binary "@$file" \
              "${upload_url}?name=$(basename "$file")&label=$(basename "$file")"
          done

          curl -s -X PATCH -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -H "Accept: application/vnd.github+json" \
            -d "{\"body\": \"$new_body\"}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/${{ github.event.release.id }}"
